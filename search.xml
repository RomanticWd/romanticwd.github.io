<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java内存模型和并发编程-知识图谱</title>
    <url>/2023/02/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<p>Java内存模型和并发编程相关知识梳理，如：JMM、线程八锁、死锁、synchronized、volatile、aqs等。</p>
<span id="more"></span>

<p><img src="/images/jmm-parallel.png" alt="Java内存模型和并发编程-知识图谱"></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?</title>
    <url>/2023/02/06/MySQL-%E9%87%8C%E6%9C%89-2000w-%E6%95%B0%E6%8D%AE%EF%BC%8CRedis-%E4%B8%AD%E5%8F%AA%E5%AD%98-20w-%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81-Redis-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%BD%E6%98%AF%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>Redis存储在内存中的数据升到配置大小时，就进行数据淘汰</p>
<p>使用 allkeys-lru 策略，从数据集（server.db[i].dict）中挑选最近最少使用的数据优先淘汰，即可满足保存热点数据</p>
<span id="more"></span>

<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>Redis 提供 6 种数据淘汰策略：</p>
<ol>
<li><strong>volatile-lru（least recently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li><strong>allkeys-lru（least recently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li>
<li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
<li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li>
</ol>
<p>4.0 版本后增加以下两种：</p>
<ol>
<li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰</li>
<li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>因为女朋友的一句话，我把ChatGpt接入了微信</title>
    <url>/2023/06/08/%E5%9B%A0%E4%B8%BA%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E4%B8%80%E5%8F%A5%E8%AF%9D%EF%BC%8C%E6%88%91%E6%8A%8AChatGpt%E6%8E%A5%E5%85%A5%E4%BA%86%E5%BE%AE%E4%BF%A1/</url>
    <content><![CDATA[<p>之前的操作一直是通过官方网址直接提问，奈何这样的方式对于网上冲浪的水平有一定要求。笔者的女朋友又是一个问题宝宝，经常看到她在百度上搜索各种答案却不得其解，抓耳挠腮的样子。便萌生了接入微信聊天，方便向ChatGpt提问的想法。</p>
<p>项目部署基于大佬的源码，<a href="https://github.com/zhayujie/chatgpt-on-wechat">源码地址</a></p>
<h2 id="一、简易版（微信个人账号）"><a href="#一、简易版（微信个人账号）" class="headerlink" title="一、简易版（微信个人账号）"></a>一、简易版（微信个人账号）</h2><blockquote>
<p>ChatGpt机器人的工作原理是微信扫码登陆后，当触发某些关键词时，通过API调用ChatGPT的接口进行回复。</p>
</blockquote>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li>注册一个ChatGpt账号，教程参考：<a href="https://juejin.cn/post/7198097078005841980">ChatGPT保姆级教程，一分钟学会使用ChatGPT！</a></li>
<li>创建完账号则前往 <a href="https://beta.openai.com/account/api-keys">API管理页面</a> 创建一个 API Key 并保存下来，后面项目配置中会用到。</li>
</ol>
<h4 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h4><p>基础版很简单，可以参考源码地址中的README.md文档进行部署。</p>
<p>这里推荐使用Railway进行部署，注册一个railway账号后即可一键部署。</p>
<p>部署过程中需要填入一些配置变量：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># config.json文件内容示例</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;open_ai_api_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YOUR API KEY&quot;</span><span class="punctuation">,</span>                          # 填入上面创建的 OpenAI API KEY</span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span>                                   # 模型名称。当use_azure_chatgpt为<span class="literal"><span class="keyword">true</span></span>时，其名称为Azure上model deployment名称</span><br><span class="line">  <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1:7890&quot;</span><span class="punctuation">,</span>                                  # 代理客户端的ip和端口</span><br><span class="line">  <span class="attr">&quot;single_chat_prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;bot&quot;</span><span class="punctuation">,</span> <span class="string">&quot;@bot&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>                      # 私聊时文本需要包含该前缀才能触发机器人回复</span><br><span class="line">  <span class="attr">&quot;single_chat_reply_prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[bot] &quot;</span><span class="punctuation">,</span>                       # 私聊时自动回复的前缀，用于区分真人</span><br><span class="line">  <span class="attr">&quot;group_chat_prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@bot&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>                              # 群聊时包含该前缀则会触发机器人回复</span><br><span class="line">  <span class="attr">&quot;group_name_white_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ChatGPT测试群&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ChatGPT测试群2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> # 开启自动回复的群名称列表</span><br><span class="line">  <span class="attr">&quot;group_chat_in_one_session&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ChatGPT测试群&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>              # 支持会话上下文共享的群名称  </span><br><span class="line">  <span class="attr">&quot;image_create_prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;画&quot;</span><span class="punctuation">,</span> <span class="string">&quot;看&quot;</span><span class="punctuation">,</span> <span class="string">&quot;找&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>                   # 开启图片回复的前缀</span><br><span class="line">  <span class="attr">&quot;conversation_max_tokens&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span>                            # 支持上下文记忆的最多字符数</span><br><span class="line">  <span class="attr">&quot;speech_recognition&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>                                # 是否开启语音识别</span><br><span class="line">  <span class="attr">&quot;group_speech_recognition&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>                          # 是否开启群组语音识别</span><br><span class="line">  <span class="attr">&quot;use_azure_chatgpt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>                                 # 是否使用Azure ChatGPT service代替openai ChatGPT service. 当设置为<span class="literal"><span class="keyword">true</span></span>时需要设置 open_ai_api_base，如 https<span class="punctuation">:</span><span class="comment">//xxx.openai.azure.com/</span></span><br><span class="line">  <span class="attr">&quot;character_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&quot;</span><span class="punctuation">,</span>  # 人格描述</span><br><span class="line">  # 订阅消息，公众号和企业微信channel中请填写，当被订阅时会自动回复，可使用特殊占位符。目前支持的占位符有<span class="punctuation">&#123;</span>trigger_prefix<span class="punctuation">&#125;</span>，在程序中它会自动替换成bot的触发词。</span><br><span class="line">  <span class="attr">&quot;subscribe_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;感谢您的关注！\n这里是ChatGPT，可以自由对话。\n支持语音对话。\n支持图片输出，画字开头的消息将按要求创作图片。\n支持角色扮演和文字冒险等丰富插件。\n输入&#123;trigger_prefix&#125;#help 查看详细指令。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>最重要的就是open_ai_api_key，填入准备工作中的OpenAI API KEY。</p>
<p>其他的一些配置是触发机器人回复的前缀、开启自动回复的群聊名称等等。可以配置这些可根据实际使用需要修改配置。 我这里就是所有群聊都可以开启机器人：</p>
<p><img src="/images/chatgpt/ccr-oX3mn2qlLycPTXsFQHNA75rV7uulE3itIVwaNxA.png" alt="image"></p>
<p>配置完毕后直接进行部署，完成会生成一个二维码，通过微信扫描二维码登陆后（类似于网页版微信），即刻开启机器人回复。</p>
<p><img src="/images/chatgpt/me-rczfIa4FMCYXt43soNabEqlK1cQRlSMfra5fzehE.png" alt="image"></p>
<p>私聊：</p>
<p><img src="/images/chatgpt/rGNNm8OfH-HZKSw9-OBQCMOfG3JKglU7hu9tQceIiPQ.png" alt="image"></p>
<p>群聊：</p>
<p><img src="/images/chatgpt/qyp1IOOG7Ij6a2z_yAWNHCr_AFLllqsuHJ9GKBcn1pw.png" alt="image"></p>
<p>至此，一个ChatGPT机器人就搭建完成了。</p>
<h4 id="简易版存在的问题"><a href="#简易版存在的问题" class="headerlink" title="简易版存在的问题"></a>简易版存在的问题</h4><ol>
<li>因为微信机制的原因，微信扫码登陆会要求手机端必须在线，同时电脑端和网页端不可以同时登陆，所以日常工作需要电脑登陆微信的话会有不便，最好是单独准备一个备用机和备用微信。</li>
<li>这样就引发了另一个问题：经常掉线。经常登陆1-2天后，机器人就掉线了，且日志打印log out无其他异常信息。 个人猜测是因为微信网页端存在测活机制，如果一定时间内该微信账号没有活跃迹象，会强制登出。 需要重新部署服务后再次扫码登陆，有点影响使用体验。</li>
<li>个人微信登陆存在封号的风险（不过我使用过程中未收到帐号异常的提醒）</li>
</ol>
<h2 id="二、升级版（微信订阅号）"><a href="#二、升级版（微信订阅号）" class="headerlink" title="二、升级版（微信订阅号）"></a>二、升级版（微信订阅号）</h2><p>为了解决简易版的一系列问题，通过微信订阅号来实现。</p>
<blockquote>
<p>实现原理：我们在关注公众号或订阅号的时候，经常发现我们输入某些关键词就会触发公众号的自动回复。这里的自动回复可以通过公众号配置，也可以通过服务器转发。即将用户的输入转发作为请求调用服务器的接口，将服务器接口的返回作为公众号的回复。</p>
</blockquote>
<h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li>一个拥有公网IP的服务器，或者本地启动服务后进行内网穿透，否则微信服务器无法将消息发送给我们的服务器。服务器的系统最好是ubuntu，不然会存在部分依赖无法安装的情况。</li>
<li>微信公众号，类型选择订阅号。</li>
<li>一个可以科学上网的订阅地址。</li>
</ol>
<p>本人环境：</p>
<ul>
<li>系统版本： Ubuntu 22.04 LTS</li>
<li>python版本：python3.10</li>
<li>pip版本：pip 22.0.2</li>
</ul>
<h4 id="微信公众平台-基本配置"><a href="#微信公众平台-基本配置" class="headerlink" title="微信公众平台-基本配置"></a>微信公众平台-基本配置</h4><p>公众号注册完后后需要进行如下配置</p>
<p><img src="/images/chatgpt/ElHDXt8g_PhmmPdqjmLlxnxR8JiBH44N3LcFp2X9Eog.png" alt="image"></p>
<ul>
<li>appId：微信公众平台生成。</li>
<li>appSecret：需要自己手动在微信公众平台生成，并做好保存。</li>
<li>IP白名单：服务器的ip地址。</li>
<li>服务器地址：http:&#x2F;&#x2F;&#x2F;wx， 根据自己实际ip地址替换。</li>
<li>token：自定义。</li>
<li>EncodingAESKey：手动在微信公众平台生成（消息加密方式为密文时候用到）。</li>
</ul>
<h4 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h4><ol>
<li>登陆服务器，克隆代码</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhayujie/chatgpt-on-wechat</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> chatgpt-on-wechat/</span><br><span class="line"><span class="comment"># 安装核心依赖</span></span><br><span class="line">pip3 install -r requirements.txt</span><br><span class="line"><span class="comment"># 安装其他依赖（也要安装）</span></span><br><span class="line">pip3 install -r requirements-optional.txt</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>安装python的web框架web.py和wechatpy</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">pip3 install web.py</span><br><span class="line">pip3 install wechatpy</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>增加配置<br>新建config.json文件，并加入下面配置，配置的相关内容根据自己的微信公众平台和服务器信息填写。</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;open_ai_api_key&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;channel_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;wechatmp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wechatmp_token&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wechatmp_port&quot;</span><span class="punctuation">:</span><span class="number">8080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wechatmp_app_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wechatmp_app_secret&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wechatmp_aes_key&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;single_chat_prefix&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;single_chat_reply_prefix&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugin_trigger_prefix&quot;</span><span class="punctuation">:</span><span class="string">&quot;&amp;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;gpt-3.5-turbo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span><span class="string">&quot;127.0.0.1:7890&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_chat_prefix&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;@bot&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_name_white_list&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ALL_GROUP&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_chat_in_one_session&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ALL_GROUP&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image_create_prefix&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;画&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;看&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;找&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;conversation_max_tokens&quot;</span><span class="punctuation">:</span><span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;speech_recognition&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group_speech_recognition&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;use_azure_chatgpt&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;character_desc&quot;</span><span class="punctuation">:</span><span class="string">&quot;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscribe_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;感谢您的关注！\n这里是ChatGPT，可以自由对话。\n支持语音对话。\n支持图片输出，画字开头的消息将按要求创作图片。\n支持角色扮演和文字冒险等丰富插件。\n输入&#123;trigger_prefix&#125;#help 查看详细指令。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>open_ai_api_key：简易版中API Key</li>
<li>channel_type：wechatmp或wechatmp_service， wechatmp是个人主体的微信订阅号，目前存在回复时间限制，每天的图片和声音回复次数也有限制。而wechatmp_service需要通过微信认证，不存在这些限制。</li>
<li>wechatmp_token：微信公众平台的Token，这里填的需要和微信公众平台中填的一致，待会会有校验。</li>
<li>wechatmp_port：微信公众平台的端口,需要端口转发到80或4430。</li>
<li>wechatmp_app_id：微信公众平台的appID。</li>
<li>wechatmp_app_secret：微信公众平台的appsecret。</li>
<li>wechatmp_aes_key：微信公众平台的EncodingAESKey，加密模式需要。</li>
<li>plugin_trigger_prefix：  推荐设置，在手机微信客户端中，$%^等符号与中文连在一起时会自动显示一段较大的间隔，用户体验不好。请不要使用管理员指令前缀”#”，这会造成未知问题。</li>
</ul>
<ol start="5">
<li>运行启动web服务器<br>使用nohup命令在后台运行程序：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> nohup.out                                   <span class="comment"># 首次运行需要新建日志文件  </span></span><br><span class="line"><span class="built_in">nohup</span> python3 app.py &amp; <span class="built_in">tail</span> -f nohup.out          <span class="comment"># 在后台运行程序并通过日志输出二维码</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>端口转发<br>服务启动的端口默认是8080端口，但是微信公众号的服务器配置只支持80&#x2F;443端口，使用端口转发命令将80端口转发到8080端口。</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</span><br><span class="line">sudo iptables-restore &lt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure>
<h4 id="微信公众平台-服务器配置"><a href="#微信公众平台-服务器配置" class="headerlink" title="微信公众平台-服务器配置"></a>微信公众平台-服务器配置</h4><ol>
<li>提交服务器配置</li>
</ol>
<p><img src="/images/chatgpt/nInfdrSroqr9gjcbbiykkm8DW_98ruiFEvK-mu21ljY.png" alt="image"><br>提交服务器配置的时候会校验服务是否可用和token是否一致，服务不可用或者token不一样，会提示token验证失败。</p>
<p><img src="/images/chatgpt/hArWFq-lA1pnGhQUkCZeLLfTCD6ktGLG946JaMC9MB8.png" alt="image"></p>
<ol start="2">
<li>启用服务器</li>
</ol>
<p>启用服务器后，订阅号收到的消息将会被转发到服务器，可以在日志文件nohup.out中看到。</p>
<p>发送消息：</p>
<p><img src="/images/chatgpt/iOgBD7BsE0N2wBZXnf-j9u9nIG0AkEsoROI5uewPYCI.png" alt="image"></p>
<p>日志打印：</p>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">[INFO][2023-05-15 16:41:03][chat_gpt_bot.py:49] - [CHATGPT] query=你好</span><br><span class="line">[WARNING][2023-05-15 16:41:09][chat_gpt_bot.py:138] - [CHATGPT] APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool(host=&#x27;api.openai.com&#x27;, port=443): Max retries exceeded with url: /v1/chat/completions (Caused by ProxyError(&#x27;Cannot connect to proxy.&#x27;, NewConnectionError(&#x27;&lt;urllib3.connection.HTTPSConnection object at 0x000001E7F7DF39A0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&#x27;)))</span><br><span class="line">[INFO][2023-05-15 16:41:10][wechat_channel.py:187] - [WX] sendMsg=Reply(type=ERROR, content=[ERROR]</span><br><span class="line">我连接不到你的网络), receiver=@86f21b179a0a03c26d1e6d93105790236ff5451d144f4c5a6f5ac0a6902d48a0</span><br></pre></td></tr></table></figure>

<h4 id="配置代理转发"><a href="#配置代理转发" class="headerlink" title="配置代理转发"></a>配置代理转发</h4><p>细心的朋友会发现，在上一步中，微信公众号返回了错误，日志中也打印了目标服务器无法连接的错误。</p>
<p>这一步是因为我们的服务器不能直接连接openai的接口，需要配置代理进行转发。</p>
<ol>
<li>下载项目</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line"># 到上一级目录</span><br><span class="line">cd ..</span><br><span class="line"># 下载项目</span><br><span class="line">git clone https://github.com/wanhebin/clash-for-linux.git</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改订阅地址</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line"># 进入项目目录</span><br><span class="line">cd clash-for-linux</span><br><span class="line"># 修改配置</span><br><span class="line">vim .env</span><br></pre></td></tr></table></figure>
<p>将CLASH_URL改为订阅地址。<br>3. 启动程序</p>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line"># 运行启动脚本</span><br><span class="line">$ sudo bash start.sh</span><br><span class="line"></span><br><span class="line">正在检测订阅地址...</span><br><span class="line">Clash订阅地址可访问！                                      [  OK  ]</span><br><span class="line"></span><br><span class="line">正在下载Clash配置文件...</span><br><span class="line">配置文件config.yaml下载成功！                              [  OK  ]</span><br><span class="line"></span><br><span class="line">正在启动Clash服务...</span><br><span class="line">服务启动成功！                                             [  OK  ]</span><br><span class="line"></span><br><span class="line">Clash Dashboard 访问地址：http://&lt;ip&gt;:9090/ui</span><br><span class="line">Secret：xxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">请执行以下命令加载环境变量: source /etc/profile.d/clash.sh</span><br><span class="line"></span><br><span class="line">请执行以下命令开启系统代理: proxy_on</span><br><span class="line"></span><br><span class="line">若要临时关闭系统代理，请执行: proxy_off</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>配置环境变量&amp;开启代理</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">$ source /etc/profile.d/clash.sh</span><br><span class="line">$ proxy_on</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>检查</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line"># 检查服务端口</span><br><span class="line">netstat -tln | grep -E &#x27;9090|789.&#x27;</span><br><span class="line">tcp        0      0 127.0.0.1:9090          0.0.0.0:*               LISTEN     </span><br><span class="line">tcp6       0      0 :::7890                 :::*                    LISTEN     </span><br><span class="line">tcp6       0      0 :::7891                 :::*                    LISTEN     </span><br><span class="line">tcp6       0      0 :::7892                 :::*                    LISTEN</span><br><span class="line"></span><br><span class="line"># 检查环境变量</span><br><span class="line">env | grep -E &#x27;http_proxy|https_proxy&#x27;</span><br><span class="line">http_proxy=http://127.0.0.1:7890</span><br><span class="line">https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<p>以上步鄹如果正常，说明服务clash程序启动成功。</p>
<ol start="6">
<li>再次进行订阅号消息测试</li>
</ol>
<p><img src="/images/chatgpt/6eO0LyUiLBbngLm5ya85ar0dwoz7RSZveDmfxhB7XlM.png" alt="image"><br>成功！</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>ChatGpt</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾回收和内存分配-知识图谱</title>
    <url>/2023/02/06/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<p>垃圾回收相关知识梳理，如：垃圾回收算法、垃圾回收器、虚拟机的内存区域和分配、jdk调优参数。</p>
<span id="more"></span>

<p><img src="/images/gabage-collection.png" alt="垃圾回收和内存分配-知识图谱"></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>欧几里得算法和裴蜀定理</title>
    <url>/2023/02/15/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%92%8C%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>欧几里德算法（又称辗转相除法）和裴蜀定理在算法中的应用。</p>
<span id="more"></span>

<h1 id="欧几里德算法"><a href="#欧几里德算法" class="headerlink" title="欧几里德算法"></a>欧几里德算法</h1><p>欧几里德算法，又称辗转相除法。</p>
<blockquote>
<p>假设有非零正整数 A、B，其中 A &gt; B，将 A 减 B 记为 C，即 A - B &#x3D; C。<br>最大公约数记为 GCD（greatest common divisor），例如 A、B 的最大公约数记为 GCD(A, B)。<br>求证：GCD(A, B) &#x3D; GCD(B, R),（其中 R 为 A 除以 B 的余数，或记为 R &#x3D; A - n * B，n 为 A 除以 B 的商。即 R &#x3D; A % B）</p>
</blockquote>
<h3 id="第一步：证明-GCD-A-B-能够整除-C"><a href="#第一步：证明-GCD-A-B-能够整除-C" class="headerlink" title="第一步：证明 GCD(A, B) 能够整除 C"></a>第一步：证明 GCD(A, B) 能够整除 C</h3><p>1.因为 GCD(A, B) 是 A 的公约数，存在整数 X，使得 X * GCD(A, B) &#x3D; A；</p>
<p>2.因为 GCD(A, B) 是 B 的公约数，存在整数 Y，使得 Y * GCD(A, B) &#x3D; B；</p>
<p>3.因为 A - B &#x3D; C，即</p>
<p>X * GCD(A, B) - Y * GCD(A, B) &#x3D; C</p>
<p>(X - Y) * GCD(A, B) &#x3D; C</p>
<p>使用图片表示即：<br><img src="/images/oujilide1.png"></p>
<p>所以有结论：</p>
<h5 id="GCD-A-B-不仅是-A-和-B-的最大公约数，同时也是-C-的约数。"><a href="#GCD-A-B-不仅是-A-和-B-的最大公约数，同时也是-C-的约数。" class="headerlink" title="GCD(A, B) 不仅是 A 和 B 的最大公约数，同时也是 C 的约数。"></a>GCD(A, B) 不仅是 A 和 B 的最大公约数，同时也是 C 的约数。</h5><h3 id="第二步：证明-GCD-B-C-能够整除-A"><a href="#第二步：证明-GCD-B-C-能够整除-A" class="headerlink" title="第二步：证明 GCD(B, C) 能够整除 A"></a>第二步：证明 GCD(B, C) 能够整除 A</h3><p>1.因为 GCD(B, C) 是 B 的公约数，存在整数 M，使得 M * GCD(B, C) &#x3D; B；</p>
<p>2.因为 GCD(B, C) 是 C 的公约数，存在整数 N，使得 N * GCD(B, C) &#x3D; C；</p>
<p>3.因为 B + C &#x3D; A，即</p>
<p>M * GCD(B, C) + N * GCD(B, C) &#x3D; A</p>
<p>(M + N) * GCD(B, C) &#x3D; A</p>
<p>使用图片表示即：<br><img src="/images/oujilide2.png"></p>
<p>所以有结论：</p>
<h5 id="GCD-B-C-不仅是-B-和-C-的最大公约数，同时也是-A-的约数。"><a href="#GCD-B-C-不仅是-B-和-C-的最大公约数，同时也是-A-的约数。" class="headerlink" title="GCD(B, C) 不仅是 B 和 C 的最大公约数，同时也是 A 的约数。"></a>GCD(B, C) 不仅是 B 和 C 的最大公约数，同时也是 A 的约数。</h5><h3 id="第三步：证明-GCD-A-B-x3D-GCD-B-C"><a href="#第三步：证明-GCD-A-B-x3D-GCD-B-C" class="headerlink" title="第三步：证明 GCD(A, B) &#x3D; GCD(B, C)"></a>第三步：证明 GCD(A, B) &#x3D; GCD(B, C)</h3><p>1.因为 GCD(A, B) 是 A 和 B 的最大公约数，同时也是 C 的约数，所以 GCD(A, B) 一定也是 B 和 C 的约数。由于 GCD(B, C) 是 B 和 C 的最大公约数，所以存在</p>
<p>GCD(A, B) &lt;&#x3D; GCD(B, C)</p>
<p>2.因为 GCD(B, C) 是 B 和 C 的最大公约数，同时也是 A 的约数，所以 GCD(B, C) 一定也是 A 和 B 的约数。由于 GCD(A, B) 是 A 和 B 的最大公约数，所以存在</p>
<p>GCD(B, C) &lt;&#x3D; GCD(A, B)</p>
<p>3.由上可得 GCD(A, B) &#x3D; GCD(B, C)</p>
<p>使用图片表示即：<br><img src="/images/oujilide3.png"></p>
<h3 id="第四步：证明-GCD-A-B-x3D-GCD-B-R"><a href="#第四步：证明-GCD-A-B-x3D-GCD-B-R" class="headerlink" title="第四步：证明 GCD(A, B) &#x3D; GCD(B, R)"></a>第四步：证明 GCD(A, B) &#x3D; GCD(B, R)</h3><p>1.因为 GCD(A, B) &#x3D; GCD(B, C)，即 GCD(A, B) &#x3D; GCD(B, A - B)</p>
<p>2.上式也可记为 GCD(A, B) &#x3D; GCD(A - B, B)</p>
<p>3.重复上一步，即有</p>
<p>GCD(A, B) &#x3D; GCD(A - B, B) &#x3D; GCD(A - 2B, B) &#x3D; … &#x3D; GCD(A - n * B, B)</p>
<p>4.所以 GCD(A, B) &#x3D; GCD(B, R)</p>
<h2 id="欧几里得算法扩展，求最大公约数的算法"><a href="#欧几里得算法扩展，求最大公约数的算法" class="headerlink" title="欧几里得算法扩展，求最大公约数的算法"></a>欧几里得算法扩展，求最大公约数的算法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static int gcd(int a, int b) &#123;</span><br><span class="line">    if (a &lt; 0 || b &lt; 0) &#123;</span><br><span class="line">        return -1; // 数学上不考虑负数的约数</span><br><span class="line">    &#125;</span><br><span class="line">    if (b == 0) &#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    // 可以整除的时候才是约数，此时b的值就是最大公约数</span><br><span class="line">    while (a % b != 0) &#123;</span><br><span class="line">        // 不停的取余</span><br><span class="line">        int temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h2><p>对于不全为零的任意整数 a 和 b，记 g&#x3D;gcd⁡(a,b)，其中 gcd⁡(a,b) 为 a 和 b 的最小公约数，则对于任意整数 x 和 y 都满足 a<em>x+b</em>y是 g 的倍数，特别地，存在整数 x 和 y 满足 a<em>x+b</em>y&#x3D;g。</p>
<p>「裴蜀定理」也可以推广到多个整数的情况。对于不全为零的任意 n个整数 a1,a2,…an<br> ，记这 n个数的最大公约数为 g，则对于任意 n 个整数 x1,x2,…xn都满足 ∑i&#x3D;ai<em>xi<br>  是 g 的倍数。一个重要的推论是：正整数 a1到 an 的最大公约数是 1 的充分必要条件是存在 n 个整数 x1到 xn满足 ∑i&#x3D;ai</em>xi&#x3D;1.</p>
<h3 id="裴蜀定理扩展"><a href="#裴蜀定理扩展" class="headerlink" title="裴蜀定理扩展"></a>裴蜀定理扩展</h3><p><a href="https://leetcode.cn/problems/check-if-it-is-a-good-array/description/">1250. 检查「好数组</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean isGoodArray(int[] nums) &#123;</span><br><span class="line">        int divisor = nums[0];</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            divisor = gcd(divisor, num);</span><br><span class="line">            if (divisor == 1) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return divisor == 1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
